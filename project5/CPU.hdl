// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    Mux16(a=false,
     b=instruction,
     sel=instruction[15],
     out=cinstruction, 
     out[0]=j1, 
     out[1]=j2,
     out[2]= j3, 
     out[3] = writeM,
     out[4]=writeD, 
     out[5]=writeA,
     out[6]= c0, 
     out[7] =c1,
     out[8]=c2, 
     out[9]=c3,
     out[10]= c4, 
     out[11] = c5,
     out[12]=a,  
     out[15] = ld );
    
    // A Register
    Mux16(a=instruction, 
    b=aluout, 
    sel=ld, 
    out=aregin);

    Not(in=ld, out=notld);
    Or(a=writeA, b=notld, out=aregld);
    ARegister(in=aregin, load=aregld, out=aout,out[0..14]=addressM);
	
    // D Register
    Mux16(a=false, b=aluout, sel=writeD, out=dregin);
    DRegister(in=dregin, load=writeD, out=dout);

    // ALU
    Mux16(a=aout, b=inM, sel=a, out=aluy);
    ALU(x=dout, y=aluy, zx=c5, nx=c4, zy=c3, ny=c2, f=c1, no=c0, out=aluout,out[0..15] = outM, zr=zrout, ng=ngout);
    
    // OUTM
    // And16(a=aluout, b=true, out=outM);

    //PC
    Not(in=ngout, out=ngnot);
    Not(in=zrout, out=zrnot);
    And(a=ngnot, b=zrnot, out=greater);
    And(a=ngout, b=zrnot, out=less);
    
    And(a=j1, b=greater, out=a1);
    And(a=j2, b=zrout, out=a2);
    And(a=j3, b=less, out=a3);

    Or(a=a1, b=a2, out=o1);
    Or(a=o1, b=a3, out=pcload);    
    
    PC(in=aout, load=pcload, inc=true, reset=reset, out[0..14]=pc);
    
}